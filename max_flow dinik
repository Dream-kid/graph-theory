#include <bits/stdc++.h>
using namespace std;
typedef long long ll;

const int maxn = 45;


int n, m, g;
int completedmatch[maxn][maxn];
int point[maxn];
int rem[maxn];

void reset(){

    memset(completedmatch, 0 ,sizeof completedmatch);
    memset(point, 0, sizeof point);
    memset(rem, 0, sizeof rem);

}


struct dinic_maxflow{
    struct edge{
        int a, b, cap, flow;
        edge(int _a, int _b, int _c, int _d){
            a = _a, b = _b, cap = _c, flow = _d;
        }
    };
    int INF = 1500000001;
    int n, s, t, d [ 30001 ], ptr[ 30001 ], q[30001*10];
    vector < edge > e;
    vector < int > g[3001];

    void addedge(int a, int b, int cap){
        //cout<<a<<' '<<b<<' '<<cap<<endl;
        edge e1 = edge {a, b, cap, 0};
        edge e2 = edge {b, a, 0, 0};
        g[a].push_back((int)e.size());
        e.push_back(e1);
        g[b].push_back((int)e.size());
        e.push_back(e2);
    }

    bool bfs(){
        int qh = 0, qt = 0;
        q[qt++] = s;
        memset(d, -1, sizeof d);
        d[s] = 0;

        while(qh < qt and d[t] == -1){
            int v = q[qh++];
            //cout<<v<<' ';
            for(size_t i = 0; i < g[v].size(); i++){
                int id = g[v][i], to = e[id].b;
                if(d[to] == -1 and e[id].flow < e[id].cap){
                    q[qt++] = to;
                    d[to] = d[v] + 1;
                }
            }
        }
        //cout<<endl<<endl;
        return d[t] != -1;
    }
    int dfs(int v, int flow){
        if(!flow) return 0;
        if(v == t) return flow;
        for(; ptr[v]<(int)g[v].size();++ptr[v]){
            int id = g[v][ptr[v]];
            int to = e[id].b;
            if(d[to] != d[v] + 1) continue;
            int pushed = dfs(to, min(flow,e[id].cap - e[id].flow));
            if(pushed){
                e[id].flow += pushed;
                e[id^1].flow -= pushed;
                return pushed;
            }
        }
        return 0;
    }

    int dinic(){
        int flow = 0;
        while(1){
            if(!bfs()) break;

            //cout<<flow<<endl;
            memset(ptr, 0,  sizeof ptr);
            while(1){
                int pushed = dfs(s,INF);
                flow += pushed;
                //cout<<pushed<<endl;
                if(pushed == 0) break;
            }
        }
        return flow;
    }

    dinic_maxflow(int _n, int _s, int _t){
        n = _n,s = _s,t = _t;
        e.clear();
        for(int i = 0; i< 3001; i++){
            g[i].clear();
        }
    }


};


int main(){
    //freopen("input.txt","r",stdin);
    //freopen("output.txt","w",stdout);
    while(scanf("%d %d %d", &n, &m, &g) == 3){
        if(!n and !m and !g) break;

        reset();


        while(g--){
            int u, v;
            char c;
            scanf("%d %c %d", &u, &c, &v);
            completedmatch[u][v]++;
            completedmatch[v][u]++;
            if(c == '='){
                point[u]++;
                point[v]++;
            }
            else if(c == '>'){
                point[u] += 2;
            }
            else{
                point[v] += 2;
            }
        }
        for(int i = 1; i < n; i++){
            if(completedmatch[0][i] < m){
                int dif = m - completedmatch[0][i];
                point[0] += dif * 2;
                completedmatch[i][0] = completedmatch[0][i] = m;
            }
        }
        dinic_maxflow object(1000,0,1000);
        bool ans = true;

        int match = 80;
        int rempoint = 0;
        for(int i = 1; i < n; i++){
            for(int j = i + 1; j < n; j++){
                if(completedmatch[i][j] < m){
                    match++;
                    object.addedge(0,match,2*(m-completedmatch[i][j]));
                    object.addedge(match,i,1500000001);
                    object.addedge(match,j,1500000001);
                    rempoint += 2*(m-completedmatch[i][j]);
                }
            }
        }
        //cerr<<rempoint<<endl;
        for(int i = 1; i < n; i++){
            if(point[i] >= point[0]) ans = false;
            rem[i] = point[0]-1 - point[i];
            object.addedge(i,40+i,rem[i]);
            object.addedge(40+i,1000,1500000001);
            //if(rem[i] < 0) ans = false;
        }
        int ret = -1;
        if(ans)ret = object.dinic();
        if(ret == rempoint and ans) printf("Y\n");
        else printf("N\n");

    }


    return 0;
}
